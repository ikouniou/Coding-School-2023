@page "/monthlyledger"
@using FuelStation.Web.Blazor.Shared.Employee;
@using FuelStation.Web.Blazor.Shared.Item;
@using FuelStation.Web.Blazor.Shared.MonthlyLedger;
@using FuelStation.Web.Blazor.Shared.Transaction;
@using FuelStation.Web.Blazor.Shared.TransactionLine;
@inject HttpClient httpClient


<PageTitle>Fuel Station - Monthly Ledger</PageTitle>

<h3>Monthly Ledger</h3>

@if (isLoading) {
	<LoadingSpinner Type="LoadingSpinnerType.Border" />
} else {

	<EditForm Model="rentingCost" OnValidSubmit="OnSave">
			<DataAnnotationsValidator />

			<div class="row">
				<div class="col-md-2">
					<label class="form-label">Renting Cost</label>
					<InputNumber class="form-control" placeholder="@rentingCost" @bind-Value="@rentingCost" />
					<ValidationMessage For="@(()=>rentingCost)" />
				</div>
			</div>
			<div class="row mt-2">
				<div class="col">
					<button class="btn btn-success" type="submit">Save</button>
					<button class="btn btn-danger" @onclick="OnClear">Clear</button>
				</div>
			</div>
    </EditForm>
	<table class="table table-striped table-hover">
		<thead>
			<tr>
				<th>Year</th>
				<th>Month</th>
				<th>Income</th>
				<th>Expenses</th>
				<th>Total</th>

			</tr>
		</thead>
		<tbody>
			@foreach (var monthlyLedger in monthlyLedgerList) {
				<tr>
					<td>@monthlyLedger.Year</td>
					<td>@monthlyLedger.Month</td>
					<td>@monthlyLedger.Income</td>
					<td>@monthlyLedger.Expenses</td>
					<td>@monthlyLedger.Total</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<MonthlyLedgerListDto> monthlyLedgerList = new();
	private List<EmployeeListDto> employeeList = new();
	private List<ItemListDto> itemList = new();
	private List<TransactionListDto> transactionList = new();
	bool isLoading { get; set; } = true;
	private int rentingCost = 5000;

	int year = 2021;
	int month = 1;
	int monthNow = DateTime.Now.Month;
	int yearNow = DateTime.Now.Year;
	decimal monthIncome;
	decimal monthExpenses;

	protected override async Task OnInitializedAsync() {
		await LoadItemsFromServer();
		CalculateLedger();
		isLoading = false;
	}

	private async Task LoadItemsFromServer() {
		transactionList = await httpClient.GetFromJsonAsync<List<TransactionListDto>>("transaction");
		employeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");
		itemList = await httpClient.GetFromJsonAsync<List<ItemListDto>>("item");
	}

	private async Task OnSave() {
		CalculateLedger();
	}

	private void CalculateLedger() {
		for (int i = year; i <= yearNow; i++) {

			for (int j = 1; j <= 12; j++) {
				if (i == yearNow && j > monthNow) {
					break;
				}
				DateTime date = new DateTime(i, j, 1);
				MonthlyLedgerListDto monthlyLedger = new MonthlyLedgerListDto(date);
				monthIncome = CalculateMonthlyIncome(date);
				monthExpenses = CalculateMonthlyExpenses(date);
				monthlyLedger.UpdateValues(monthIncome, monthExpenses);
				monthlyLedgerList.Add(monthlyLedger);
			}
		}
	}

	private void OnClear() {
		monthlyLedgerList.Clear();
	}

	private decimal CalculateMonthlyIncome(DateTime date) {
		int year = date.Year;
		int month = date.Month;
		decimal sum = 0;

		foreach(var transaction in transactionList) {
			if(transaction.Date.Year == year && transaction.Date.Month == month) {
				sum += transaction.TotalValue;
			}
		}

		return sum;
	}

	private decimal CalculateMonthlyExpenses(DateTime date) {
		int year = date.Year;
		int month = date.Month;
		DateTime yearMonth = new DateTime(year, month, 1);
		decimal sum = 0;

		foreach(var employee in employeeList) {

			if(employee.HireDateStart.Date <= yearMonth && employee.HireDateEnd.Date >= yearMonth) {
				sum += employee.SallaryPerMonth;
			}
		}

		List<TransactionListDto> transactionsThisMonth = transactionList.FindAll(c => c.Date.Month == month).FindAll(c => c.Date.Year == year).ToList();
		foreach(var transaction in transactionsThisMonth) {
			foreach(var transactionLine in transaction.TransactionLines) {
				ItemListDto item = itemList.FindAll(item => item.Id == transactionLine.ItemId).SingleOrDefault();
				sum += transactionLine.Quantity * item.Cost;
			}
		}
		sum += rentingCost;

		return sum;
	}
}
