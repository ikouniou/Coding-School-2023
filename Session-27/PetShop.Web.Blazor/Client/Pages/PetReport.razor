@page "/petreport"
@using PetShop.Model;
@using PetShop.Web.Blazor.Shared.PetReport;
@using PetShop.Web.Blazor.Shared.Transaction;
@inject HttpClient httpClient

<h3>Pet Report</h3>

@if (isLoading) {
	<LoadingSpinner Type="LoadingSpinnerType.Border" />
} else {
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Year</th>
            <th>Month</th>
            <th>Birds Sold</th>
            <th>Mammals Sold</th>
            <th>Reptiles Sold</th>
            <th>Fishes Sold</th>
            <th>Total Sold</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var petReport in petReportList) {
            <tr>
                <td>@petReport.Year</td>
                <td>@petReport.Month</td>
                <td>@petReport.BirdSold</td>
                <td>@petReport.MammalSold</td>
                <td>@petReport.ReptileSold</td>
                <td>@petReport.FishSold</td>
                <td>@($"{petReport.BirdSold + petReport.MammalSold + petReport.ReptileSold + petReport.FishSold}")</td>
            </tr>
        }
    </tbody>
</table>
}
@code {
    private List<TransactionListDto> Transactions = new();
    bool isLoading { get; set; } = true;
    int year = 2023;
    int month = 1;
    int monthNow = DateTime.Now.Month;
    int yearNow = DateTime.Now.Year;
    int BirdsSold;
    int MammalsSold;
    int ReptilesSold;
    int FishesSold;
    List<PetReportListDto> petReportList = new List<PetReportListDto>();
    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        for (int i = year; i <= yearNow; i++) {

            for (int j = 1; j <= 12; j++) {
                if (i == yearNow && j > monthNow) {
                    break;
                }
                DateTime date = new DateTime(i, j, 1);
                PetReportListDto petReport = new PetReportListDto(date);

                BirdsSold = CalculateBirdsSold(date);
                MammalsSold = CalculateMammalsSold(date);
                ReptilesSold = CalculateReptilesSold(date);
                FishesSold = CalculateFishesSold(date);
                petReport.UpdateSold(BirdsSold, MammalsSold, ReptilesSold, FishesSold);
               
                petReportList.Add(petReport);
              
            }
        }
        isLoading = false;
    }
    private async Task LoadItemsFromServer() {
        Transactions = await httpClient.GetFromJsonAsync<List<TransactionListDto>>("petreport");
    }
    public int CalculateBirdsSold(DateTime date)
    {
        int month = date.Month;
        int year = date.Year;
        int birdsMonth = 0;
        int mammalsMonth = 0;
        int reptilesMonth = 0;
        int fishesMonth = 0;
        List<TransactionListDto> transactionsThisMonth = Transactions.FindAll(c => c.Date.Month == month).FindAll(c => c.Date.Year == year).ToList();
        foreach(var transaction in transactionsThisMonth)
        {

                if(transaction.PetType.ToString() == "Bird")
                {
                    birdsMonth++;
                }
            
        }
        return birdsMonth;
    }
    public int CalculateFishesSold(DateTime date)
    {
        int month = date.Month;
        int year = date.Year;
        int fishesMonth = 0;
        List<TransactionListDto> transactionsThisMonth = Transactions.FindAll(c => c.Date.Month == month).FindAll(c => c.Date.Year == year).ToList();
        foreach (var transaction in transactionsThisMonth)
        {
            if (transaction.PetType.ToString() == "Fish")
            {
                fishesMonth++;
            }
        }
        return fishesMonth;
    }
    public int CalculateMammalsSold(DateTime date)
    {
        int month = date.Month;
        int year = date.Year;
        int mammalsMonth = 0;
        List<TransactionListDto> transactionsThisMonth = Transactions.FindAll(c => c.Date.Month == month).FindAll(c => c.Date.Year == year).ToList();
        foreach (var transaction in transactionsThisMonth)
        {
            if (transaction.PetType.ToString() == "Mammal")
            {
                mammalsMonth++;
            }
        }
        return mammalsMonth;
    }
    public int CalculateReptilesSold(DateTime date)
    {
        int month = date.Month;
        int year = date.Year;
        int reptilesMonth = 0;
        List<TransactionListDto> transactionsThisMonth = Transactions.FindAll(c => c.Date.Month == month).FindAll(c => c.Date.Year == year).ToList();
        foreach (var transaction in transactionsThisMonth)
        {
            if (transaction.PetType.ToString() == "Reptile")
            {
                reptilesMonth++;
            }
        }
        return reptilesMonth;
    }
}