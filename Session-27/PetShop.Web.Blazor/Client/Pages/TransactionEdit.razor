@page "/transactionlist/edit/{Id:int?}"
@using PetShop.Model
@using PetShop.Web.Blazor.Shared.Customer;
@using PetShop.Web.Blazor.Shared.Employee;
@using PetShop.Web.Blazor.Shared.Pet;
@using PetShop.Web.Blazor.Shared.PetFood;
@using PetShop.Web.Blazor.Shared.Transaction;

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>@title</h3>

@if (isLoading) {
    <LoadingSpinner Type="LoadingSpinnerType.Border" />
} else {
    <div class="row">
        @*<div class="col-md-4">
    <label class="form-label">Date</label>
    <input class="form-control"  @bind="@Transaction.Date" disabled />
    </div>*@
        <div class="col-md-4">
            <label class="form-label">Pet</label>
            <select class="form-control" @bind="@Transaction.PetId" @bind:after="@( ()=> getPetPrice(Transaction.PetId))">
                @foreach (var pet in Transaction.Pets) {
                    <option value="@pet.Id">@pet.Breed</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label class="form-label">Pet Price</label>
            <input class="form-control" @bind="@Transaction.PetPrice" disabled />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <label class="form-label">Pet Food</label>
            <select class="form-control" @bind="@Transaction.PetFoodId" @bind:after="@( ()=> getPetFoodPrice(Transaction.PetFoodId))">
                @foreach (var petFood in Transaction.PetFoods) {

                    <option value="@petFood.Id">@petFood.AnimalType</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label class="form-label">Pet Food Price</label>
            <input class="form-control" @bind="@Transaction.PetFoodPrice" disabled />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <label class="form-label">Pet Food Qty</label>
            <input class="form-control" @bind="@Transaction.PetFoodQty" @bind:after="@(() =>getTot())" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <label class="form-label">Total Price</label>
            <input class="form-control" @bind="@Transaction.TotalPrice" disabled />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <label class="form-label">Customer</label>
            <select class="form-control" @bind="@Transaction.CustomerId">
                @foreach (var customer in Transaction.Customers) {
                    <option value="@customer.Id">@customer.Name @customer.Surname</option>
                }
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <label class="form-label">Employee</label>
            <select class="form-control" @bind="@Transaction.EmployeeId">
                @foreach (var employee in Transaction.Employees) {
                    <option value="@employee.Id">@employee.Name @employee.Surname</option>
                }
            </select>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col">
            <button class="btn btn-success" @onclick="OnSave">Save</button>
            <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
        </div>
    </div>
}

@code {
    [Parameter] public int? Id { get; set; }
    bool isLoading = true;
    TransactionEditDto Transaction { get; set; }
    string? title;

    protected override async Task OnInitializedAsync() {
        if (Id == null) {
            title = "Create transaction";
            Transaction = new();
            Transaction.Customers = await httpClient.GetFromJsonAsync<List<CustomerEditDto>>("customer");
            Transaction.Employees = await httpClient.GetFromJsonAsync<List<EmployeeEditDto>>("employee");
            Transaction.Pets = (await httpClient.GetFromJsonAsync<List<PetEditDto>>("pet")).FindAll(pet => (((int)pet.PetStatus == 1) || (int)pet.PetStatus == 3));
            Transaction.PetFoods = await httpClient.GetFromJsonAsync<List<PetFoodEditDto>>("petfood");
            Transaction.TotalPrice = Transaction.PetPrice + Transaction.PetFoodPrice * Transaction.PetFoodQty;

        } else {
            title = "Edit Transaction";
            Transaction = await httpClient.GetFromJsonAsync<TransactionEditDto>($"transaction/{Id}");
            Transaction.Employees = await httpClient.GetFromJsonAsync<List<EmployeeEditDto>>("employee");
            Transaction.Pets = (await httpClient.GetFromJsonAsync<List<PetEditDto>>("pet")).FindAll(pet => (((int)pet.PetStatus == 1) || (int)pet.PetStatus == 3)); ;
            Transaction.PetFoods = await httpClient.GetFromJsonAsync<List<PetFoodEditDto>>("petfood");
            Transaction.Customers = await httpClient.GetFromJsonAsync<List<CustomerEditDto>>("customer");

        }

        isLoading = false;
    }
    private void OnCancel() {
        navigationManager.NavigateTo("transactionlist");
    }
    private async Task OnSave() {
        HttpResponseMessage? response;
        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("transaction", Transaction);
        } else {
            response = await httpClient.PutAsJsonAsync("transaction", Transaction);
        }
        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("transactionlist");
    }
    async Task getTot() {
        if (Transaction.PetType == Transaction.FoodType) {
            if (Transaction.PetFoodQty > 0) {
                Transaction.TotalPrice = Transaction.PetPrice + Transaction.PetFoodPrice * (Transaction.PetFoodQty - 1);

            } else {
                Transaction.TotalPrice = Transaction.PetPrice + Transaction.PetFoodPrice * Transaction.PetFoodQty;
            }
        } else {
            Transaction.TotalPrice = Transaction.PetPrice + Transaction.PetFoodPrice * Transaction.PetFoodQty;
        }
    }
    async Task getPetPrice(int id) {
        Transaction.PetPrice = Transaction.Pets.FirstOrDefault(pet => pet.Id == id).Price;
        Transaction.TotalPrice = Transaction.PetPrice + Transaction.PetFoodPrice * Transaction.PetFoodQty;
        Transaction.PetType = Transaction.Pets.Find(x => x.Id == id).AnimalType;

        if (Transaction.PetType == Transaction.FoodType) {
            if (Transaction.PetFoodQty > 0) {
                Transaction.TotalPrice = Transaction.PetPrice + Transaction.PetFoodPrice * (Transaction.PetFoodQty - 1);

            } else {
                Transaction.TotalPrice = Transaction.PetPrice + Transaction.PetFoodPrice * Transaction.PetFoodQty;
            }
        } else {
            Transaction.TotalPrice = Transaction.PetPrice + Transaction.PetFoodPrice * Transaction.PetFoodQty;
        }

    }
    async Task getPetFoodPrice(int id) {

        Transaction.PetFoodPrice = Transaction.PetFoods.FirstOrDefault(petFood => petFood.Id == id).Price;
        Transaction.TotalPrice = Transaction.PetPrice + Transaction.PetFoodPrice * Transaction.PetFoodQty;
        Transaction.FoodType = Transaction.PetFoods.Find(x => x.Id == id).AnimalType;
        if (Transaction.PetType == Transaction.FoodType) {
            if (Transaction.PetFoodQty > 0) {
                Transaction.TotalPrice = Transaction.PetPrice + Transaction.PetFoodPrice * (Transaction.PetFoodQty - 1);
            } else {
                Transaction.TotalPrice = Transaction.PetPrice + Transaction.PetFoodPrice * Transaction.PetFoodQty;
            }
        }

    }


}