@page "/employeelist"
@using PetShop.Web.Blazor.Shared.Employee;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime


<h3>Employee List</h3>

@if (isLoading) {
	<LoadingSpinner Type="LoadingSpinnerType.Border" />
} else {
	<button class="btn btn-primary" @onclick="CreateItem">Create</button>

	<table class="table table-striped table-hover">
		<thead>
			<tr>
				<th>Name</th>
				<th>Surname</th>
				<th>Employee Type</th>
				<th>Salary Per Month</th>
				<th>Options</th>

			</tr>
		</thead>
		<tbody>
			@foreach (var employee in employeeList) {
				<tr>
					<td>@employee.Name</td>
					<td>@employee.Surname</td>
					<td>@employee.EmployeeType</td>
					<td>@employee.SalaryPerMonth €</td>
					<td>
						<button class="btn btn-primary" @onclick="()=> EditItem(employee)">Edit</button>
						<button class="btn btn-secondary" @onclick="() => DetailsItem(employee)">Details</button>
						<button class="btn btn-danger" @onclick="()=> DeleteItem(employee)">Delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}




@code {
	private List<EmployeeListDto> employeeList = new();
	bool isLoading { get; set; } = true;

	protected override async Task OnInitializedAsync() {
		await LoadItemsFromServer();
		isLoading = false;
	}

	private async Task LoadItemsFromServer() {
		employeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");
	}

	private void CreateItem() {
		navigationManager.NavigateTo("employeelist/edit");
	}

	private void EditItem(EmployeeListDto employee) {
		navigationManager.NavigateTo($"employeelist/edit/{employee.Id}");
	}

	private void DetailsItem(EmployeeListDto employee){
		navigationManager.NavigateTo($"employeelist/details/{employee.Id}");
	}

	private async Task DeleteItem(EmployeeListDto employee) {
		var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
		if (confirm) {
			var response = await httpClient.DeleteAsync($"employee/{employee.Id}");
			response.EnsureSuccessStatusCode();
			await LoadItemsFromServer();
		}
	}
}
